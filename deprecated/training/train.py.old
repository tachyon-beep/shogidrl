import argparse
from keisei.config_schema import AppConfig, EnvConfig, TrainingConfig, EvaluationConfig, LoggingConfig, WandBConfig, DemoConfig
from keisei.training.trainer import Trainer

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', type=str, default='resnet', help='Model architecture (resnet)')
    parser.add_argument('--input_features', type=str, default='core46', help='Feature set for board observation planes')
    parser.add_argument('--tower_depth', type=int, default=10, help='ResNet tower depth')
    parser.add_argument('--tower_width', type=int, default=128, help='ResNet tower width')
    parser.add_argument('--se_ratio', type=float, default=0.25, help='SE block ratio (0 disables)')
    parser.add_argument('--mixed_precision', action='store_true', help='Enable mixed-precision training')
    parser.add_argument('--ddp', action='store_true', help='Enable DDP training')
    
    args = parser.parse_args()

    # Build TrainingConfig from CLI args
    training = TrainingConfig(
        input_features=args.input_features,
        tower_depth=args.tower_depth,
        tower_width=args.tower_width,
        se_ratio=args.se_ratio,
        model_type=args.model,
        mixed_precision=args.mixed_precision,
        ddp=args.ddp
        # ...other TrainingConfig fields can be set here or use defaults...
    )
    # Build AppConfig with required subconfigs using explicit defaults
    config = AppConfig(
        env=EnvConfig(device="cpu", input_channels=46, num_actions_total=13527, seed=42),
        training=training,
        evaluation=EvaluationConfig(num_games=20, opponent_type="random"),
        logging=LoggingConfig(log_file="logs/training_log.txt", model_dir="models/"),
        wandb=WandBConfig(enabled=True, project="keisei-shogi", entity=None),
        demo=DemoConfig(enable_demo_mode=False, demo_mode_delay=0.5)
    )
    trainer = Trainer(config)
    # ...existing code...