name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Only run on Python code changes and key configuration files
    paths:
      - "keisei/**/*.py"
      - "tests/**/*.py"
      - "*.py"
      - "requirements*.txt"
      - "default_config.yaml"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request for the Keisei Deep Reinforcement Learning system and provide feedback on:
            
            **Code Quality & Architecture:**
            - Adherence to the manager-based architecture pattern
            - Clean interfaces between training components
            - PPO algorithm implementation correctness
            - Neural network architecture patterns
            
            **Shogi Game Implementation:**
            - Game rule logic correctness
            - Move validation and execution
            - Board state representation accuracy
            
            **Performance & Efficiency:**
            - PyTorch usage patterns and memory management
            - Training loop efficiency
            - GPU utilization optimization
            
            **Testing & Safety:**
            - Test coverage for RL training components
            - Error handling and edge cases
            - Configuration validation
            
            **Deep RL Best Practices:**
            - Experience buffer management
            - Policy/value function separation
            - Checkpointing and model persistence
            
            Be constructive and focus on maintaining stable, production-ready RL training.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

